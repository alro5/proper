import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import React, { useEffect, useRef, useState } from "react";
import Autocomplete from "react-autocomplete";
import { Button } from "../components/button";
import { SkeletonLoader } from "../components/skeleton-loader";
import { DawaSearchResult, Home, NewHome, SearchResult } from "../models";
import * as fetch from "../http";
import { isSafari } from "../utils";

const Home: NextPage = () => {
  const [tenancies, setTenancies] = useState<Home[]>([]);
  const [searchResult, setSearchResult] = useState<SearchResult[]>([]);
  const [loading, setLoading] = useState(true);
  const modalRef = useRef<any>();
  const addressId = useRef("");
  const [value, setValue] = useState("");

  async function fetchData() {
    const response = await fetch.get<{ tenancies: Home[] }>("/api/tenancies");

    setTenancies(response.tenancies);
    setLoading(false);
  }

  async function addTenancy(home: { address: string }) {
    const response = await fetch.post<NewHome, { tenancy: Home }>(
      "/api/tenancies",
      home
    );

    setTenancies((old) => [...old, response.tenancy]);

    // @ts-ignore
    if (typeof HTMLDialogElement === "function") {
      modalRef.current.close();
    }
  }

  async function deleteTenancy(id: string) {
    await fetch._delete<any>(`/api/tenancies/${id}`);

    const updatedTenancies = tenancies.filter((item) => {
      return item.id != id;
    });

    setTenancies(updatedTenancies);
  }

  async function onChange(v: { label: string; id?: string }) {
    setValue(v.label);

    const response = await fetch.get<DawaSearchResult[]>(
      `https://api.dataforsyningen.dk/adresser/autocomplete?q=${v.label}&fuzzy=true&=per_side=5`
    );
    const dawaResult = response.map((item) => {
      return {
        label: item.tekst,
        id: item.adresse,
      };
    });

    setSearchResult(dawaResult);
  }

  useEffect(() => {
    fetchData();
  }, []);

  return (
    <>
      <div className="mt-8">
        <Head>
          <title>Proper | My tenancies</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <h2 className="mb-6 text-base sm:text-lg md:text-xl lg:text-2xl xl:text-3xl">
          My tenancies
        </h2>
        <ul className="mb-8">
          {loading && <Loader />}
          {tenancies &&
            !loading &&
            tenancies.map((item, index) => {
              return (
                <li
                  className="flex items-center justify-between mb-3 transition rounded bg-slate-200 hover:bg-slate-300"
                  key={`tenancy-id-${index}`}
                >
                  <Link href={item.id}>
                    <a className="w-full h-full p-3 truncate">
                      <p className="flex-1 min-w-0 truncate">{item.address}</p>
                    </a>
                  </Link>
                  <Button
                    className="mr-2 font-semibold"
                    type="button"
                    size="small"
                    primary={false}
                    onClick={() => deleteTenancy(item.id)}
                  >
                    Delete
                  </Button>
                </li>
              );
            })}
        </ul>
        <div className="text-right hide-safari">
          <Button
            onClick={() => {
              modalRef.current.showModal();

              setValue("");
            }}
            type="button"
          >
            Add new
          </Button>
        </div>
      </div>
      <dialog
        className="rounded overflow-hidden shadow-lg w-[360px] py-6 px-4"
        ref={modalRef}
      >
        <div className="w-full max-w-lg">
          <h3 className="mb-4 text-base sm:text-lg md:text-xl lg:text-2xl xl:text-3xl">
            Add new address
          </h3>
          <Autocomplete
            getItemValue={(item) => {
              addressId.current = item.id;
              return item.label;
            }}
            wrapperStyle={{
              display: "block",
              zIndex: 1,
              position: "relative",
            }}
            items={searchResult}
            value={value}
            onChange={(_, value) => onChange({ label: value })}
            onSelect={(value) => setValue(value)}
            renderInput={(props) => {
              return (
                <>
                  <label
                    className="block mb-2 text-xs font-bold tracking-wide text-gray-700 uppercase"
                    htmlFor="address"
                  >
                    Address
                  </label>
                  <input
                    {...props}
                    id="address"
                    className="block w-full px-4 py-3 leading-tight text-gray-700 bg-gray-200 border border-gray-200 rounded appearance-none focus:outline-none focus:bg-white focus:border-gray-500"
                  />
                </>
              );
            }}
            renderItem={(item, isHighlighted) => (
              <div
                key={item.label}
                className="relative z-10 p-2 bg-white cursor-pointer"
                style={{ background: isHighlighted ? "lightgray" : "white" }}
              >
                {item.label}
              </div>
            )}
          />
          <div className="relative z-0 flex w-full gap-2 mt-2">
            <Button
              onClick={() => modalRef.current.close()}
              type="button"
              primary={false}
              className="w-full"
            >
              Cancel
            </Button>
            <Button
              type="button"
              disabled={!value}
              className={`w-full ${!value && "opacity-50 cursor-not-allowed"}`}
              onClick={() =>
                addTenancy({
                  address: value,
                })
              }
            >
              Confirm
            </Button>
          </div>
        </div>
      </dialog>
    </>
  );
};

const Loader = () => {
  return (
    <>
      {Array(3)
        .fill(0)
        .map((_, index) => {
          return (
            <li className="mb-3" key={`loader-item-${index}`}>
              <SkeletonLoader height={48} />
            </li>
          );
        })}
    </>
  );
};

export default Home;
